[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Bowers. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bowers J (2025). manytestsr: Testing detect heterogeneous effects block-randomized experiments. R package version 0.0.3.0000.","code":"@Manual{,   title = {manytestsr: Testing to detect heterogeneous effects in block-randomized experiments},   author = {Jake Bowers},   year = {2025},   note = {R package version 0.0.3.0000}, }"},{"path":[]},{"path":"/index.html","id":"development-info","dir":"","previous_headings":"","what":"Development Info","title":"Testing to detect heterogeneous effects in block-randomized experiments","text":"","code":"devtools::document() devtools::check()"},{"path":"/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes:","title":"Testing to detect heterogeneous effects in block-randomized experiments","text":"using three main C functions: fast_dists_by_unit_arma2_par using openmp (parallel=\"yes\"), fast_dists_and_trans small n, fast_dists_and_trans_by_unit_arma N>20. (20 chosen without lot profiling. Basic idea hold large matrices memory. Matrices faster N large, bog large number observations.","code":""},{"path":"/reference/alpha_addis.html","id":null,"dir":"Reference","previous_headings":"","what":"Alpha adjustment function: ADDIS — alpha_addis","title":"Alpha adjustment function: ADDIS — alpha_addis","text":"function accept vector p-values vector indicating batch p-values produces vector alpha values.","code":""},{"path":"/reference/alpha_addis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alpha adjustment function: ADDIS — alpha_addis","text":"","code":"alpha_addis(pval, batch, nodesize, thealpha = 0.05, thew0 = 0.05 - 0.001)"},{"path":"/reference/alpha_addis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alpha adjustment function: ADDIS — alpha_addis","text":"pval numeric vector p-values batch character factor even numeric vector indicating grouping among p-values order p-values. first element pval first element batch first p-value produced tree subsequent p-values produced children root (children children root, etc.) nodesize vector indicating information used create p-value. example, number observations, weighted version. thealpha overall error rate given test thew0 starting \"wealth\" alpha investing procedure","code":""},{"path":"/reference/alpha_addis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alpha adjustment function: ADDIS — alpha_addis","text":"vector alpha values","code":""},{"path":"/reference/alpha_investing.html","id":null,"dir":"Reference","previous_headings":"","what":"Alpha adjustment function: Alpha Investing — alpha_investing","title":"Alpha adjustment function: Alpha Investing — alpha_investing","text":"function accept vector p-values vector indicating batch p-values produces vector alpha values.","code":""},{"path":"/reference/alpha_investing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alpha adjustment function: Alpha Investing — alpha_investing","text":"","code":"alpha_investing(pval, batch, nodesize, thealpha = 0.05, thew0 = 0.05 - 0.001)"},{"path":"/reference/alpha_investing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alpha adjustment function: Alpha Investing — alpha_investing","text":"pval numeric vector p-values batch character factor even numeric vector indicating grouping among p-values order p-values. first element pval first element batch first p-value produced tree subsequent p-values produced children root (children children root, etc.) nodesize vector indicating information used create p-value. example, number observations, weighted version. thealpha overall error rate given test thew0 starting \"wealth\" alpha investing procedure","code":""},{"path":"/reference/alpha_investing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alpha adjustment function: Alpha Investing — alpha_investing","text":"vector alpha values","code":""},{"path":"/reference/alpha_saffron.html","id":null,"dir":"Reference","previous_headings":"","what":"Alpha adjustment function: SAFFRON — alpha_saffron","title":"Alpha adjustment function: SAFFRON — alpha_saffron","text":"function accept vector p-values vector indicating batch p-values produces vector alpha values.","code":""},{"path":"/reference/alpha_saffron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alpha adjustment function: SAFFRON — alpha_saffron","text":"","code":"alpha_saffron(pval, batch, nodesize, thealpha = 0.05, thew0 = 0.05 - 0.001)"},{"path":"/reference/alpha_saffron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alpha adjustment function: SAFFRON — alpha_saffron","text":"pval numeric vector p-values batch character factor even numeric vector indicating grouping among p-values order p-values. first element pval first element batch first p-value produced tree subsequent p-values produced children root (children children root, etc.) nodesize vector indicating information used create p-value. example, number observations, weighted version. thealpha overall error rate given test thew0 starting \"wealth\" alpha investing procedure","code":""},{"path":"/reference/alpha_saffron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alpha adjustment function: SAFFRON — alpha_saffron","text":"vector alpha values","code":""},{"path":"/reference/dists_and_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Outcome distances and transformations — dists_and_trans","title":"Outcome distances and transformations — dists_and_trans","text":"Outcome distances transformations","code":""},{"path":"/reference/dists_and_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outcome distances and transformations — dists_and_trans","text":"","code":"dists_and_trans(x, Z)"},{"path":"/reference/dists_and_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outcome distances and transformations — dists_and_trans","text":"x numeric vector ( outcome variable) Z just placeholder used part api distance functions","code":""},{"path":"/reference/dists_and_trans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Outcome distances and transformations — dists_and_trans","text":"list  inclusion data.table  distances unit units well transformations distances","code":""},{"path":"/reference/edisti.html","id":null,"dir":"Reference","previous_headings":"","what":"Outcome e-distances between treatment arms — edisti","title":"Outcome e-distances between treatment arms — edisti","text":"Outcome e-distances treatment arms","code":""},{"path":"/reference/edisti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outcome e-distances between treatment arms — edisti","text":"","code":"edisti(x, Z)"},{"path":"/reference/edisti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outcome e-distances between treatment arms — edisti","text":"x numeric vector ( outcome variable) Z binary numeric vector  factor vector   two values","code":""},{"path":"/reference/edisti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Outcome e-distances between treatment arms — edisti","text":"Vector  individual level components energy distances unit units  control condition","code":""},{"path":"/reference/fast_dists_and_trans_by_unit_arma_parR.html","id":null,"dir":"Reference","previous_headings":"","what":"Outcome distances and transformations: C++ OpenMP Parallel version — fast_dists_and_trans_by_unit_arma_parR","title":"Outcome distances and transformations: C++ OpenMP Parallel version — fast_dists_and_trans_by_unit_arma_parR","text":"Outcome distances transformations: C++ OpenMP Parallel version","code":""},{"path":"/reference/fast_dists_and_trans_by_unit_arma_parR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outcome distances and transformations: C++ OpenMP Parallel version — fast_dists_and_trans_by_unit_arma_parR","text":"","code":"fast_dists_and_trans_by_unit_arma_parR(threads)"},{"path":"/reference/fast_dists_and_trans_by_unit_arma_parR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outcome distances and transformations: C++ OpenMP Parallel version — fast_dists_and_trans_by_unit_arma_parR","text":"threads integer number cores use.","code":""},{"path":"/reference/fast_dists_and_trans_by_unit_arma_parR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Outcome distances and transformations: C++ OpenMP Parallel version — fast_dists_and_trans_by_unit_arma_parR","text":"distance creation function taking x (numeric vector, usually outcome) variable Z used.","code":""},{"path":"/reference/find_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Test, Split, Repeat — find_blocks","title":"Test, Split, Repeat — find_blocks","text":"Split test.","code":""},{"path":"/reference/find_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test, Split, Repeat — find_blocks","text":"","code":"find_blocks(   idat,   bdat,   blockid = \"block\",   splitfn,   pfn,   alphafn = NULL,   local_adj_p_fn = NULL,   simthresh = 20,   sims = 1000,   maxtest = 2000,   thealpha = 0.05,   thew0 = 0.05 - 0.001,   fmla = YContNorm ~ trtF | blockF,   parallel = \"multicore\",   ncores = 4,   copydts = FALSE,   splitby = \"hwt\",   stop_splitby_constant = TRUE,   blocksize = \"hwt\",   return_what = c(\"blocks\", \"nodes\"),   trace = FALSE )"},{"path":"/reference/find_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test, Split, Repeat — find_blocks","text":"idat Data unit level. bdat Data block level. blockid character name column idat bdat indicating block. splitfn function split data two pieces — using bdat pfn function produce pvalues — using idat. alphafn function adjust alpha step. Takes one p-values plus stratum batch indicator. Currently alpha_investing, alpha_saffron, alpha_addis accepted. wrap corresponding functions onlineFDR package. local_adj_p_fn Function. function adjusts p-values node (e.g. local_simes). simthresh number total observations p-value functions use permutations rather asymptotic approximations sims Number permutations permutation-based testing maxtest Maximum splits tests . probably smaller number experimental blocks. thealpha error rate given test (cases alphafn NULL, starting alpha alphafn null) thew0 starting \"wealth\" alpha investing procedure (relevant alphafn null). fmla formula outcome~treatment assignment  | block treatment assignment block must factors. parallel pfn use multicore processing permutation based testing. Default . \"snow\" \"multicore\" following approximate coin package. ncores number cores used parallel processing copydts TRUE FALSE. TRUE using find_blocks standalone. FALSE copied objects sent find_blocks functions. splitby string indicating column bdat contains variable guide splitting (example, column block sizes block harmonic mean weights column covariate (function covariates) column factor levels separated \".\" indicates pre-specified series splits (see splitSpecifiedFactor)) stop_splitby_constant TRUE splitting stop splitby constant within given branch tree. FALSE splitting continue even splitby constant. Default TRUE. Different combinations splitby, splitfn, stop_splitby_constant make less sense described . blocksize string name column bdat contains information size block (determinant power tests within block, harmonic mean weight block variance outcome within block.) return_what Character. Return data.table blocks \"blocks\", data.table nodes \"nodes\", default c(\"blocks\",\"nodes\"). trace Logical, FALSE (default) print split number. TRUE prints split number. final_global_adj Character. One \"none\", \"fdr\", \"fwer\".","code":""},{"path":"/reference/find_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test, Split, Repeat — find_blocks","text":"data.table containing information sequence splitting testing","code":""},{"path":"/reference/find_blocks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test, Split, Repeat — find_blocks","text":"notes splitting functions relate splitting criteria (splitby) stopping criteria (stop_splitby_constant). splitLOO() chooses blocks largest splitby vector one time two tests, one focusing highest ranked block one rest blocks (example, block units versus rest blocks). splitby vector ties, chooses one block random among tied first largest rank. split vector values, example, two values, still split assuming vector numeric (, 1 ranked higher 0) randomly among ties. stop_splitby_constant=TRUE, algorithm stop exhausting blocks higher ranked category (thinking binary splitby case). reason advise using splitLOO factor splitby vector categories. splitLOO() best used splitby vector like block-size — constant thus just create random choice single block vary thus focus testing largest/highest ranked blocks. splitEqualApprox() splits sets blocks two groups sum splitby vector approximately split. example, splitby number units block, splitting function makes two groups blocks, group total number units. splitting function work discrete factors : rank_splitby <- rank(splitby) divide blocks groups based taking every rank. , factors variables categories ordered, allocate every category one another group. splitCluster() splits blocks groups similar possible splitby using kmeans clustering algorithm (using combination kmeans() KMeans_rcpp()). work factor variables. splitting criteria constant, return random splits roughly two equal sized groups blocks stop_splitby_constant=FALSE. stop_splitby_constant=TRUE find_blocks() stop return groups blocks detected . splitSpecifiedFactor() split blocks two groups following prespecified pattern encoded labels levels factor. example, imagine three nested levels splitting (like states, districts, neighborhoods), factor labels like category1_level1.category2_level1.category3_level1 splits occur left right depending whether existing variation level. factor constant stop_splitby_constant=TRUE splitting stops. reason recommend right-label factor individual blocks —ensure testing descends block level can. stop_splitby_constant=FALSE, uses random splits. splitSpecifiedFactorMulti() split blocks two groups following prespecified pattern encoded labels levels factor. example, imagine three nested levels splitting (like states, districts, neighborhoods), factor labels like category1_level1.category2_level1.category3_level1 splits occur left right depending whether existing variation level. reason recommend right-label factor individual blocks —ensure testing descends block level can. factor constant stop_splitby_constant=TRUE splitting stops. stop_splitby_constant=FALSE, uses random splits.","code":""},{"path":"/reference/local_bh_all_ps.html","id":null,"dir":"Reference","previous_headings":"","what":"BH local adjustment — local_bh_all_ps","title":"BH local adjustment — local_bh_all_ps","text":"Performs Benjamini-Hochberg adjustment vector p-values.","code":""},{"path":"/reference/local_bh_all_ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BH local adjustment — local_bh_all_ps","text":"","code":"local_bh_all_ps(pvals_children, alpha = 0.05)"},{"path":"/reference/local_bh_all_ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BH local adjustment — local_bh_all_ps","text":"pvals_children Numeric vector child p-values. alpha Numeric scalar alpha (used)","code":""},{"path":"/reference/local_bh_all_ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BH local adjustment — local_bh_all_ps","text":"numeric vector BH-adjusted p-values.","code":""},{"path":"/reference/local_bh_all_ps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BH local adjustment — local_bh_all_ps","text":"","code":"local_bh_all_ps(c(0.01, 0.04, 0.10, 0.20)) #> [1] 0.0400000 0.0800000 0.1333333 0.2000000"},{"path":"/reference/local_hommel_all_ps.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute local Hommel p-value for a Vector of Child p-values — local_hommel_all_ps","title":"Compute local Hommel p-value for a Vector of Child p-values — local_hommel_all_ps","text":"Given \\(k\\) child p-values, computes Hommel-adjusted p-values","code":""},{"path":"/reference/local_hommel_all_ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute local Hommel p-value for a Vector of Child p-values — local_hommel_all_ps","text":"","code":"local_hommel_all_ps(pvals_children, alpha = 0.05)"},{"path":"/reference/local_hommel_all_ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute local Hommel p-value for a Vector of Child p-values — local_hommel_all_ps","text":"pvals_children Numeric vector child p-values. alpha Numeric scalar alpha (used function)","code":""},{"path":"/reference/local_hommel_all_ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute local Hommel p-value for a Vector of Child p-values — local_hommel_all_ps","text":"vector adjusted p-values","code":""},{"path":"/reference/local_hommel_all_ps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute local Hommel p-value for a Vector of Child p-values — local_hommel_all_ps","text":"","code":"local_hommel_all_ps(c(0.01, 0.04, 0.10, 0.20)) #> [1] 0.04 0.12 0.20 0.20"},{"path":"/reference/local_min_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Unadjusted local minimal p-value — local_min_p","title":"Unadjusted local minimal p-value — local_min_p","text":"Given \\(k\\) child p-values, returns highest p-value alpha; none alpha returns smallest p-value.","code":""},{"path":"/reference/local_min_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unadjusted local minimal p-value — local_min_p","text":"","code":"local_min_p(pvals_children, alpha = 0.05)"},{"path":"/reference/local_min_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unadjusted local minimal p-value — local_min_p","text":"pvals_children Numeric vector child p-values. alpha Numeric scalar alpha","code":""},{"path":"/reference/local_min_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unadjusted local minimal p-value — local_min_p","text":"single numeric value.","code":""},{"path":"/reference/local_min_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unadjusted local minimal p-value — local_min_p","text":"","code":"local_min_p(c(0.01, 0.04, 0.10, 0.20)) #> [1] 0.04 local_min_p(c(0.10, 0.20)) #> [1] 0.1"},{"path":"/reference/local_simes.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute local Simes p-value for a Vector of Child p-values — local_simes","title":"Compute local Simes p-value for a Vector of Child p-values — local_simes","text":"Given \\(k\\) child p-values, computes Simes p-value \\(\\min_{=1\\ldots k} \\{ (k/) * p_{()} \\}\\), \\(p_{(1)} \\le \\ldots \\le p_{(k)}\\).","code":""},{"path":"/reference/local_simes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute local Simes p-value for a Vector of Child p-values — local_simes","text":"","code":"local_simes(pvals_children, alpha = 0.05)"},{"path":"/reference/local_simes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute local Simes p-value for a Vector of Child p-values — local_simes","text":"pvals_children Numeric vector child p-values. alpha Numeric scalar alpha (used function)","code":""},{"path":"/reference/local_simes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute local Simes p-value for a Vector of Child p-values — local_simes","text":"single numeric value: Simes combination p-value.","code":""},{"path":"/reference/local_simes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute local Simes p-value for a Vector of Child p-values — local_simes","text":"","code":"local_simes(c(0.01, 0.04, 0.10, 0.20)) #> [1] 0.04"},{"path":"/reference/local_unadj_all_ps.html","id":null,"dir":"Reference","previous_headings":"","what":"Unadjusted local step (pass-through) — local_unadj_all_ps","title":"Unadjusted local step (pass-through) — local_unadj_all_ps","text":"Returns input p-values unmodified.","code":""},{"path":"/reference/local_unadj_all_ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unadjusted local step (pass-through) — local_unadj_all_ps","text":"","code":"local_unadj_all_ps(pvals_children, alpha = 0.05)"},{"path":"/reference/local_unadj_all_ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unadjusted local step (pass-through) — local_unadj_all_ps","text":"pvals_children Numeric vector child p-values. alpha Numeric scalar alpha (used)","code":""},{"path":"/reference/local_unadj_all_ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unadjusted local step (pass-through) — local_unadj_all_ps","text":"numeric vector: input.","code":""},{"path":"/reference/local_unadj_all_ps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unadjusted local step (pass-through) — local_unadj_all_ps","text":"","code":"local_unadj_all_ps(c(0.01, 0.04)) #> [1] 0.01 0.04"},{"path":"/reference/make_results_ggraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a plot of the nodes — make_results_ggraph","title":"Make a plot of the nodes — make_results_ggraph","text":"Given results splitting testing algorithm form graph make_results_tree, make node level data set use reporting results terms binary tree graph. print plot graph. need resulting object.","code":""},{"path":"/reference/make_results_ggraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a plot of the nodes — make_results_ggraph","text":"","code":"make_results_ggraph(res_graph, remove_na_p = TRUE)"},{"path":"/reference/make_results_ggraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a plot of the nodes — make_results_ggraph","text":"res_graph tidygraph object produced make_results_tree remove_na_p logical indicating whether graph include nodes/leaves tested. Default (TRUE) remove . remove_na_p FALSE, graph might look strange since blocks known position graph  (graph fixed, specified find_blocks function node block visited testing.)","code":""},{"path":"/reference/make_results_ggraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a plot of the nodes — make_results_ggraph","text":"ggraph object","code":""},{"path":"/reference/make_results_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a node-level dataset from a block-level dataset — make_results_tree","title":"Make a node-level dataset from a block-level dataset — make_results_tree","text":"Given results splitting testing algorithm, make node level data set use reporting results input ggraph visualization terms tree graph.","code":""},{"path":"/reference/make_results_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a node-level dataset from a block-level dataset — make_results_tree","text":"","code":"make_results_tree(   orig_res,   block_id,   node_label = NULL,   return_what = \"all\",   truevar_name = NULL )"},{"path":"/reference/make_results_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a node-level dataset from a block-level dataset — make_results_tree","text":"orig_res data.table find_blocks(); must include elements biggrp    (dot-sep lineage, may truncated), p1,p2,… pfinal*, alpha1, alpha2, … block_id name block ID column (e.g. \"bF\") node_label optional name descriptive label column return_what character vector containing \"\", \"graph\" (tbl_graph object nodes edges), \"nodes\" (data.table node level information), \"test_summary\" (data.table object one row indicating false true discoveries, etc.) truevar_name optional name column recording true treatment effect (used find blocks true effect 0 ). simulations column called nonnull TRUE block node non-zero effect FALSE block node truly zero effect. , truevar_name can \"nonnull\"","code":""},{"path":"/reference/make_results_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a node-level dataset from a block-level dataset — make_results_tree","text":"list can contain nodes, tbl_graph object, /test_summary","code":""},{"path":"/reference/nodeidfn.html","id":null,"dir":"Reference","previous_headings":"","what":"Use hashing to make a node id — nodeidfn","title":"Use hashing to make a node id — nodeidfn","text":"internal function used find_blocks. (rare) designs can produce many nodes problems integers. , using hashes default.","code":""},{"path":"/reference/nodeidfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use hashing to make a node id — nodeidfn","text":"","code":"nodeidfn(d)"},{"path":"/reference/nodeidfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use hashing to make a node id — nodeidfn","text":"d vector","code":""},{"path":"/reference/nodeidfn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use hashing to make a node id — nodeidfn","text":"vector hashes","code":""},{"path":"/reference/pIndepDist.html","id":null,"dir":"Reference","previous_headings":"","what":"P-value function: Independence Treatment Distance Test — pIndepDist","title":"P-value function: Independence Treatment Distance Test — pIndepDist","text":"functions accept data frame perhaps test specific arguments (like whether test asymptotic simulation based). produces p-value.","code":""},{"path":"/reference/pIndepDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"P-value function: Independence Treatment Distance Test — pIndepDist","text":"","code":"pIndepDist(   dat,   fmla = YcontNorm ~ trtF | blockF,   simthresh = 20,   sims = 1000,   parallel = \"yes\",   ncpu = NULL,   groups = NULL,   distfn = dists_and_trans,   adaptive_dist_function = TRUE )"},{"path":"/reference/pIndepDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"P-value function: Independence Treatment Distance Test — pIndepDist","text":"dat object inheriting class data.frame fmla formula  appropriate function.  something like outcome~treatment|block simthresh size data use direct permutations p-values sims Either NULL (meaning use asymptotic reference dist) number (meaning sampling randomization distribution implied formula) parallel \"\" parallelization required, otherwise \"multicore\" \"snow\" call coin::independence_test() (see  help coin::approximate()). Also, parallel \"\" adaptive_dist_function TRUE, openmp version distance creation function called using ncpu threads (parallel::detectCores(logical=FALSE) cores). ncpu number cpus  used parallel operation. groups vector defining groups within inter-unit  distances calculated. used . distfn  function produces one vectors (data frame matrix)  number  rows dat adaptive_dist_function TRUE distance calculation function chosen using previous benchmarks. See code.","code":""},{"path":"/reference/pIndepDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"P-value function: Independence Treatment Distance Test — pIndepDist","text":"p-value","code":""},{"path":"/reference/pIndepDist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"P-value function: Independence Treatment Distance Test — pIndepDist","text":"now,  function  omnibus-style chi-square  test using (1) ratio   distances controls distances treated observations within block;  (2)   rank  distances  controls unit; (3) raw outcome. Although distances calculated block, profiling suggests better parallelize distance creation distfn (done C++ fastfns.cpp file) rather use data.table approach setDTthreads(). , assume threads data.table 1.","code":""},{"path":"/reference/pOneway.html","id":null,"dir":"Reference","previous_headings":"","what":"P-value function: T-test — pOneway","title":"P-value function: T-test — pOneway","text":"functions accept data frame perhaps test specific arguments (like whether test asymptotic simulation based). produces p-value.","code":""},{"path":"/reference/pOneway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"P-value function: T-test — pOneway","text":"","code":"pOneway(   dat,   fmla = YContNorm ~ trtF | blockF,   simthresh = 20,   sims = 1000,   parallel = \"no\",   ncpu = NULL )"},{"path":"/reference/pOneway.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"P-value function: T-test — pOneway","text":"dat object inheriting class data.frame fmla outcome~treatment factor | block factor (following coin API). simthresh number total observations p-value functions use permutations rather asymptotic approximations sims Either NULL (meaning use asymptotic reference dist) number (meaning sampling randomization distribution implied formula) parallel function use multicore processing permutation based testing. Default . \"snow\" \"multicore\" following approximate coin package. ncpu number workers (\"snow\") cores (\"multicore\").","code":""},{"path":"/reference/pOneway.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"P-value function: T-test — pOneway","text":"p-value","code":""},{"path":"/reference/pTestTwice.html","id":null,"dir":"Reference","previous_headings":"","what":"P-value function: Testing twice — pTestTwice","title":"P-value function: Testing twice — pTestTwice","text":"functions accept data frame perhaps test specific arguments (like whether test asymptotic simulation based). produces p-value.","code":""},{"path":"/reference/pTestTwice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"P-value function: Testing twice — pTestTwice","text":"","code":"pTestTwice(   dat,   fmla = YcontNorm ~ trtF | blockF,   simthresh = 20,   sims = 1000,   parallel = \"yes\",   ncpu = NULL,   groups = NULL )"},{"path":"/reference/pTestTwice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"P-value function: Testing twice — pTestTwice","text":"dat object inheriting class data.frame fmla formula  appropriate function.  something like outcome~treatment|block simthresh size data use direct permutations p-values sims Either NULL (meaning use asymptotic reference dist) number (meaning sampling randomization distribution implied formula) parallel \"\" parallelization required, otherwise \"multicore\" \"snow\" call coin::independence_test() (see  help coin::approximate()). Also, parallel \"\" adaptive_dist_function TRUE, openmp version distance creation function called using ncpu threads (parallel::detectCores(logical=FALSE) cores). ncpu number cpus  used parallel operation. groups vector defining groups within inter-unit  distances calculated. used . distfn  function produces one vectors (data frame matrix)  number  rows dat adaptive_dist_function TRUE distance calculation function chosen using previous benchmarks. See code.","code":""},{"path":"/reference/pTestTwice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"P-value function: Testing twice — pTestTwice","text":"p-value","code":""},{"path":"/reference/pTestTwice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"P-value function: Testing twice — pTestTwice","text":"now,  function  omnibus-style max-T test using (1) raw outcome (2) rank transformed raw outcome.","code":""},{"path":"/reference/pWilcox.html","id":null,"dir":"Reference","previous_headings":"","what":"P-value function: Wilcox Test — pWilcox","title":"P-value function: Wilcox Test — pWilcox","text":"functions accept data frame perhaps test specific arguments (like whether test asympotic simulation based). produces p-value.","code":""},{"path":"/reference/pWilcox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"P-value function: Wilcox Test — pWilcox","text":"","code":"pWilcox(   dat,   fmla = YContNorm ~ trtF | blockF,   simthresh = 20,   sims = 1000,   parallel = \"no\",   ncpu = NULL )"},{"path":"/reference/pWilcox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"P-value function: Wilcox Test — pWilcox","text":"dat object inheriting class data.frame fmla outcome~treatment factor | block factor (following coin API). simthresh number total observations p-value functions use permutations rather asymptotic approximations sims Either NULL (meaning use asymptotic reference dist) number (meaning sampling randomization distribution implied formula) parallel function use multicore processing permutation based testing. Default . \"snow\" \"multicore\" following approximate coin package. ncpu number workers (\"snow\") cores (\"multicore\").","code":""},{"path":"/reference/pWilcox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"P-value function: Wilcox Test — pWilcox","text":"p-value","code":""},{"path":"/reference/report_detections.html","id":null,"dir":"Reference","previous_headings":"","what":"Return detected blocks plus info — report_detections","title":"Return detected blocks plus info — report_detections","text":"Given results splitting testing algorithm, report blocks null effects rejected level alpha. Currently calculates rejections using FWER style criteria (p node = max previous nodes) final alphas scalar alpha fwer=TRUE.","code":""},{"path":"/reference/report_detections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return detected blocks plus info — report_detections","text":"","code":"report_detections(   orig_res,   fwer = TRUE,   alpha = 0.05,   only_hits = FALSE,   blockid = \"blockF\" )"},{"path":"/reference/report_detections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return detected blocks plus info — report_detections","text":"orig_res results data.table output find_blocks function. fwer (default TRUE) means block detected () using maximum p-value associated block (groups containing block). fwer=FALSE detect blocks (groups blocks) using FDR control. alpha false positive rate used detecting effect constant (.e. FDR-style approach). only_hits (default FALSE) returns detected blocks instead blockid Name block variable (blocking variable factor)","code":""},{"path":"/reference/report_detections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return detected blocks plus info — report_detections","text":"data.table adding column hit res data.table indicating \"hit\" detection block (group blocks)","code":""},{"path":"/reference/splitCluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Splitting function: K-Means Clustering — splitCluster","title":"Splitting function: K-Means Clustering — splitCluster","text":"splitting function takes block ids block ordering vector (vectors) produces factor assigns block ids one group another group.","code":""},{"path":"/reference/splitCluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splitting function: K-Means Clustering — splitCluster","text":"","code":"splitCluster(bid, x)"},{"path":"/reference/splitCluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splitting function: K-Means Clustering — splitCluster","text":"bid Block id x vector can use order blocks","code":""},{"path":"/reference/splitCluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splitting function: K-Means Clustering — splitCluster","text":"factor categorizing blocks groups.","code":""},{"path":"/reference/splitEqualApprox.html","id":null,"dir":"Reference","previous_headings":"","what":"Splitting function: Approx Equal Splits — splitEqualApprox","title":"Splitting function: Approx Equal Splits — splitEqualApprox","text":"splitting function takes block ids block ordering vector (vectors) produces factor assigns block ids one group another group sum x within one group approximately equal sum x group. x something like block-size equalized total observations split. x covariate, splitting approach may make less conceptual sense — x <- c(1,2,3,4) put 1 3 one group 2 4 another group.","code":""},{"path":"/reference/splitEqualApprox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splitting function: Approx Equal Splits — splitEqualApprox","text":"","code":"splitEqualApprox(bid, x)"},{"path":"/reference/splitEqualApprox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splitting function: Approx Equal Splits — splitEqualApprox","text":"bid Block id x vector can use order blocks","code":""},{"path":"/reference/splitEqualApprox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splitting function: Approx Equal Splits — splitEqualApprox","text":"factor categorizing blocks groups.","code":""},{"path":"/reference/splitLOO.html","id":null,"dir":"Reference","previous_headings":"","what":"Splitting function: Leave One Out — splitLOO","title":"Splitting function: Leave One Out — splitLOO","text":"splitting function takes block ids block ordering vector (vectors) produces factor assigns block ids one group another group.","code":""},{"path":"/reference/splitLOO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splitting function: Leave One Out — splitLOO","text":"","code":"splitLOO(bid, x)"},{"path":"/reference/splitLOO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splitting function: Leave One Out — splitLOO","text":"bid Block id x vector can use order blocks. block-level value. Like N harmonic mean weight block.","code":""},{"path":"/reference/splitLOO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splitting function: Leave One Out — splitLOO","text":"factor categorizing blocks groups.","code":""},{"path":"/reference/splitSpecified.html","id":null,"dir":"Reference","previous_headings":"","what":"A set of pre-specified splits using a data.table object (Deprecate) — splitSpecified","title":"A set of pre-specified splits using a data.table object (Deprecate) — splitSpecified","text":"set pre-specified splits using data.table object (Deprecate)","code":""},{"path":"/reference/splitSpecified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A set of pre-specified splits using a data.table object (Deprecate) — splitSpecified","text":"","code":"splitSpecified(bid, x)"},{"path":"/reference/splitSpecified.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A set of pre-specified splits using a data.table object (Deprecate) — splitSpecified","text":"bid used x data.table object column 1 k divides blocks. Column one highest level column nested","code":""},{"path":"/reference/splitSpecifiedFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"A set of pre-specified splits — splitSpecifiedFactor","title":"A set of pre-specified splits — splitSpecifiedFactor","text":"function binary splits using factor variable dots separating names subgroups. two subgroups level, makes one group largest subgroup another group rest. multiple subgroups size, chooses first subgroup order levels factor.","code":""},{"path":"/reference/splitSpecifiedFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A set of pre-specified splits — splitSpecifiedFactor","text":"","code":"splitSpecifiedFactor(bid, x)"},{"path":"/reference/splitSpecifiedFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A set of pre-specified splits — splitSpecifiedFactor","text":"bid Block id x factor levels like \"state.district.school\". splits occur left right depending whether existing variation level","code":""},{"path":"/reference/splitSpecifiedFactorMulti.html","id":null,"dir":"Reference","previous_headings":"","what":"A set of pre-specified splits — splitSpecifiedFactorMulti","title":"A set of pre-specified splits — splitSpecifiedFactorMulti","text":"function allows two splits level","code":""},{"path":"/reference/splitSpecifiedFactorMulti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A set of pre-specified splits — splitSpecifiedFactorMulti","text":"","code":"splitSpecifiedFactorMulti(bid, x)"},{"path":"/reference/splitSpecifiedFactorMulti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A set of pre-specified splits — splitSpecifiedFactorMulti","text":"bid Block id x factor levels like \"state.district.school\". splits occur left right depending whether existing variation level","code":""}]
